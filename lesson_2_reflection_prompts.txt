What happens when you initialize a repository? Why do you need to do it?

How is the staging area different from the working directory and the repository?
What value do you think it offers?

How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?


What to do if you accidently add a file to the staging area ...
If you accidentally add a file to the staging area, you can remove it using git reset. 
For example, if you accidentally add lesson_2_reflections.txt, but don’t want it to be committed yet, run git reset lesson_2_reflections.txt and the file will be removed from the staging area, but it will still be in your working directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area acts as a well, stage where you have the opportunity to select what you finally want to put into the repositry.

git reset --hard, discards any changes made to the 'working directory' as well as the 'staging area'.
Note that git reset is not a reversible process, so be careful!!

Branches and merging
a) git branch       shows the branches
b) git branch <branch-name>    branch to this branch. Currently checked out branch is marked with * (e.g. * master)
c) git checkout <branch-name>  checkout this branch to make it the current one.
d) git checkout -b <branch-name>     equivalent of b and c done in a single command.

git log --graph --oneline master coins, for a graphical view of branch and repo structure. --oneline to make the output shorter and easier to see.

git show <commit-hash>, shows the diff between the commit and its 'parent', without actually knowing what the parent was.

git branch -d <branch-name>, to delete a branch.
